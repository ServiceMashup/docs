function ajax(method, serviceName, path, value) {
  return getServiceUrls(serviceName).then(function (urls) {
    if (!urls.length) throw new Error('No endpoint configured for service ' + serviceName);

    // Map urls to a list of operations
    var funcs = urls.map(function (url) {
      return $http[method].bind($http, 'http://' + url + path, value, { timeout: config.timeout });
    });

    return invokeUntilResolved(funcs);
  });
}

function getServiceUrls(serviceName) {
  if (cache[serviceName]) return $q.when(cache[serviceName]);

  var funcs = config.discoveryServers.map(function (discoveryServer) {
    return $http.get.bind($http, discoveryServer + '/v1/catalog/service/' + serviceName);
  });

  return invokeUntilResolved(funcs).then(function (result) {
    var serviceUrls = result.data.map(function (itm) {
      return itm.Address + ':' + itm.ServicePort;
    });

    cache[serviceName] = serviceUrls;
    return serviceUrls;
  });
}

function invokeUntilResolved(funcs) {
  // Invoke functions that return promises sequentially
  // and return the first resolved promise.
  // Invoke the next function only when the return value
  // of the previous function is a rejected promise.
  return funcs.reduce(function (previous, next) {
    return previous.catch(next);
  }, $q.reject(new Error('No function specified')));
}